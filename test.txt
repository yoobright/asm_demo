__DATA
    input_c1_0_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    input_c1_1_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    input_c1_2_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    input_c1_3_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    kernel_c1_addr       Byte, 2400        ;5*5*3*32 = 2400    kernels  of conv1
    bias_c1_addr         Byte, 32        ;1*32 = 32    bias_fixed  of conv1
    kernel_c2_addr       Byte, 25600    ;5*5*32*32 = 25600    kernels  of conv2
    bias_c2_addr         Byte, 32        ;1*32 = 32    bias_fixed  of conv2
    kernel_c3_addr       Byte, 51200    ;5*5*32*64 = 51200    kernels  of conv3
    bias_c3_addr         Byte, 64        ;1*64= 64    bias_fixed  of conv3
    kernel_fc4_addr      Byte, 65536    ;4*4*64*64 elements    kernels  of fc4
    bias_fc4_addr        Byte, 64        ;1*64 = 64 elements    bias_fixed  of fc4
    kernel_fc5_addr      Byte, 640        ;1*1*64*10 elements    kernels  of fc5
    bias_fc5_addr        Byte, 10        ;1*10 = 10 elements    bias_fixed  of fc5
    output_fc4_addr      Byte, 256        ;1*64*4 = 256 elements    outputs_fc of fc4 �ķ�ͼ��һ����
    output_fc5_addr      Byte, 40        ;1*10*4= 40 elements    outputs_fc of fc5 �ķ�ͼ��һ����
    outputs_pool_c1_addr Byte, 32768    ;16*16*32*4 = 32768 elements    output of conv1, input of conv2 �ķ�ͼ��һ����    conv1���������ӦΪconv2������
    outputs_pool_c2_addr Byte, 8192        ;8*8*32*4 = 8192 elements    output of conv2, input of conv3 �ķ�ͼ��һ����
    outputs_pool_c3_addr Byte, 4096        ;4*4*64*4 = 4096 elements    output of conv3, input of fc-4    �ķ�ͼ��һ����


__CODE
	;import_mem ./lenet_fixed8/conv2_mem_data_out.txt
	s_wauxi [AUX_LSVLN], 0		;load���ݽ�VR	Lane��Ϊ0	Indicate the Lane index to be loaded or stored in vector load/store instructions is 0	�ܷ�֧�����������˴���֧������������
	s_wauxi [AUX_LSVHV], 0		;load data horizontally	indicate the data will be transferred horizontally into Lane SRAM array
	s_wauxi [AUX_LSVSTRD], 0	;address stride 0	indicate the address stride (of elements number) between each element in memory for vector load/store instructions
	s_wauxi [AUX_LSVROWSTRD], 0	;row stride 0	indicates The stride between each row or each column in memory space

	s_wauxi [AUX_ACTLN], 0		;Vector�������ø����Ĵ���		Indicate which Lane will be activated.
	s_wauxi [AUX_INTRND], 0		;���㻰����	round mode	Indicate the rounding mode if the element is fixed-point.
	s_wauxi [AUX_INTSAT], 0		;saturate mode	Indicate saturation mode
	s_wauxi [AUX_INTFXDP], 4	;truncate 4	Indicate the truncate position for the least significant bits of fixed-point result
	s_wauxi [AUX_ACTTASK],0b1111	;����Ŀ�����ݵ���������Լ����������Ϊ4��byte	indicates The stride between each element in VR/VS
	s_wauxi [AUX_VLEN0], 2	;2��
	s_wauxi [AUX_MVVROW], 12		;12��
	s_wauxi [AUX_MVVDRIDX], 0	;��0�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 0	;��0�п�ʼ
	v_movi_b VR1,0				;padding1 ��	�����Ҳ�12*2�ľ���padding

	s_wauxi [AUX_VLEN0], 8		;8��
	s_wauxi [AUX_MVVROW], 2		;2��
	s_wauxi [AUX_MVVDRIDX], 0	;��0�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 2	;��2�п�ʼ
	v_movi_b VR1,0				;padding2 ��	�����ϲ�2*8�ľ���padding

	s_wauxi [AUX_VLEN0], 2		;2��
	s_wauxi [AUX_MVVROW], 12		;12��
	s_wauxi [AUX_MVVDRIDX], 0	;��0�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 10	;��10�п�ʼ
	v_movi_b VR1,0				;padding3 ��	�������10*2�ľ���padding

	s_wauxi [AUX_VLEN0], 8		;8��
	s_wauxi [AUX_MVVROW], 2		;2��
	s_wauxi [AUX_MVVDRIDX], 10	;��10�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 2	;��2�п�ʼ
	v_movi_b VR1,0				;padding4 ��	�����²�2*8�ľ���padding

	s_wauxi [AUX_VLEN0], 2		;2��
	s_wauxi [AUX_MVVROW], 12		;12��
	s_wauxi [AUX_MVVDRIDX], 16	;��16�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 0	;��0�п�ʼ
	v_movi_b VR1,0				;padding1 ��	�����Ҳ�12*2�ľ���padding

	s_wauxi [AUX_VLEN0], 8		;8��
	s_wauxi [AUX_MVVROW], 2		;2��
	s_wauxi [AUX_MVVDRIDX], 16	;��16�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 2	;��2�п�ʼ
	v_movi_b VR1,0				;padding2 ��	�����ϲ�2*8�ľ���padding

	s_wauxi [AUX_VLEN0], 2		;2��
	s_wauxi [AUX_MVVROW], 12		;12��
	s_wauxi [AUX_MVVDRIDX], 16	;��16�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 10	;��10�п�ʼ
	v_movi_b VR1,0				;padding3 ��	�������10*2�ľ���padding

	s_wauxi [AUX_VLEN0], 8		;8��
	s_wauxi [AUX_MVVROW], 2		;2��
	s_wauxi [AUX_MVVDRIDX], 26	;��26�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 2	;��2�п�ʼ
	v_movi_b VR1,0				;padding4 ��	�����²�2*8�ľ���padding

	s_wauxi [AUX_VLEN0], 1		;1��
	s_wauxi [AUX_MVVROW], 9		;9��
	s_wauxi [AUX_MVVDRIDX], 0	;��0�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 8	;��8�п�ʼ
	v_movi_b VR8,0				;padding1 ��	�������9*1�ľ���padding

	s_wauxi [AUX_VLEN0], 8		;8��
	s_wauxi [AUX_MVVROW], 1		;1��
	s_wauxi [AUX_MVVDRIDX], 8	;��8�п�ʼ
	s_wauxi [AUX_MVVDCIDX], 0	;��1�п�ʼ
	v_movi_b VR8,0				;padding2 ��	�����²�1*8�ľ���padding

	s_addi  SR1, SR0, 0			;i����
loop0:
	s_addi  SR2, SR0, 0
	s_addi  SR4, SR0, 0			;j����
	s_wauxi [AUX_DWUP], 1		;entire lane holding two matrix	indicate if the 2D convolution instruction is operated on half-lane mode
	s_wauxi [AUX_VLEN0], 8		;��������Ϊ8
	s_wauxi [AUX_ACTPE], 0b00000000_11111111_00000000_11111111	;������������	ʹ��16��PE	Indicate which PE (of each active Lane) will be activated.
	v_add_b  VR8, VR0, VR0
	s_mulwi SR6, SR1, 800
	s_add  SR3, SR0, SR6		;kernel�����offset=5*5*32*i(SR1)+5*5*j(SR3)


	s_wauxi [AUX_LSVROW], 8		;8��	indicates the number of rows to be transferred from/to memory in vertical transferred mode
loop1:
	s_wauxi [AUX_ACTTASK],0b1111
	s_wauxi [AUX_LSVRIDX], 2	;��ʼ�к� 2	indicate the row index for starting element in Lane SRAM array
	s_wauxi [AUX_LSVCIDX], 2	;��ʼ�к� 2	indicate the column index for starting element in Lane SRAM array
	s_wauxi [AUX_LSVLEN], 8		;һ��load 8��Ԫ��	indicate the number of elements to be loaded or stored in vector load/store instructions
	v_ld_b  VR1, SR2, $outputs_pool_c2_addr 	;����load��VR1 �ϰ벿��	load����8*8���� input_conv
	s_wauxi [AUX_LSVRIDX], 18	;��ʼ�к� 18	indicates the number of rows to be transferred from/to memory in vertical transferred mode
	s_wauxi [AUX_LSVCIDX], 2	;��ʼ�к� 2	indicate the row index for starting element in Lane SRAM array
	;==============4��ͼһ���ȡ=================
	s_addi SR2, SR2, 256			;offset = 8*8*4fig = 64*4=256
	v_ld_b  VR1, SR2, $outputs_pool_c2_addr 	;����load��VR1 �°벿��

	s_wauxi [AUX_LSVCIDX], 0	;��ʼ�к�0	indicate the column index for starting element in Lane SRAM array
	s_wauxi [AUX_LSVLEN], 25	;һ��load 25��Ԫ��	indicate the number of elements to be loaded or stored in vector load/store instructions
	s_wauxi [AUX_ACTTASK],0b0001
	v_ld_b  VS1, SR3, $kernel_c3_addr 	;����load��VS1
	s_wauxi [AUX_ACTTASK],0b0010
	v_ld_b  VS1, SR3, $kernel_c3_addr 	;����load��VS1
	s_wauxi [AUX_ACTTASK],0b0100
	v_ld_b  VS1, SR3, $kernel_c3_addr 	;����load��VS1
	s_wauxi [AUX_ACTTASK],0b1000
	v_ld_b  VS1, SR3, $kernel_c3_addr 	;����load��VS1

	s_addi SR3, SR3, 25
	s_wauxi [AUX_ACTTASK],0b0001
	v_ld_b  VS3, SR3, $kernel_c3_addr 	;����load��VS3
	s_wauxi [AUX_ACTTASK],0b0010
	v_ld_b  VS3, SR3, $kernel_c3_addr 	;����load��VS3
	s_wauxi [AUX_ACTTASK],0b0100
	v_ld_b  VS3, SR3, $kernel_c3_addr 	;����load��VS3
	s_wauxi [AUX_ACTTASK],0b1000
	v_ld_b  VS3, SR3, $kernel_c3_addr 	;����load��VS3


	s_wauxi [AUX_VLEN0], 12		;2D �����Ҫ���õ�	12*12=144��Ԫ��	The number of elements in vector operands.
	s_wauxi [AUX_ACTPE], 0b00000000_11111111_00000000_11111111		;ʹ��16��PE	Indicate which PE (of each active Lane) will be activated.
	s_wauxi [AUX_VLEN1], 5		;width is 5	indicate the sliding window length of 1D/2D sliding
	s_wauxi [AUX_VLEN2], 5		;height is 5	indicate the sliding window height of 2D sliding
	s_wauxi [AUX_SLDSTRD1], 1	;indicate the  horizontal stride of elements number for 2D sliding.
	s_wauxi [AUX_SLDSTRD2], 1	;indicate the vertical stride of elements number for 2D sliding
	v_cnv2d_b  VR2, VR1, VS1	;�ⲽ�������VR1���������룬ACTPEӦ���0x00ff00ff	2D �������	����������VR2
	;==============4��ͼһ���ȡ=================
	s_addi SR2, SR2, 256		;offset = 8*8*4fig = 64*4=256
	s_addi SR3, SR3, 25
	s_addi SR4, SR4, 2			;j=j+2

	s_wauxi [AUX_ACTTASK],0b1111
	s_wauxi [AUX_MVVROW], 8		;��VR2���°벿������VR7���ں����ľ�������ۼӲ���	8��	The number of rows in source or destination operands.
	s_wauxi [AUX_VLEN0], 8		;ÿ��8��Ԫ��	The number of elements in source or destination operands
	s_wauxi [AUX_MVVSRIDX], 16	;Դ����λ��16�п�ʼ	The row index for starting element of source operand in Lane SRAM array
	s_wauxi [AUX_MVVSCIDX], 0	;Դ����λ��0�п�ʼ	The column index for starting element of source operand in Lane SRAM array
	s_wauxi [AUX_MVVDRIDX], 0	;Ŀ������λ��0�п�ʼ	The row index for starting element of the destination operand in Lane SRAM arra
	s_wauxi [AUX_MVVDCIDX], 0 	;Ŀ������λ��0�п�ʼ	The column index for starting element of the destination operand in Lane SRAM array
	v_mov_b VR7, VR2
	;print_f vR7, aux_lsvln=0, aux_lsvridx=0, aux_lsvcidx=0, aux_lsvlen=8, aux_lsvrow =8, output=checkcheck.txt
	s_wauxi [AUX_VLEN0], 8		;��������Ϊ8
	s_wauxi [AUX_ACTPE], 0b00000000_00000000_00000000_11111111	;������������	ʹ��8��PE	Indicate which PE (of each active Lane) will be activated.
	v_add_b  VR2, VR2, VR7
	v_add_b  VR8, VR2, VR8		;�ۼӾ�����
	;s_bne SR4, 32 , loop1
	;print_b VR3, ln=0, ridx=0, cidx=0, len=8, row=8, intfxdp=4, acttask=0b0001, output=checkcheck.txt,output_mat=D:/output_mat/vcadd.mat

	s_ld_b SR5, SR1, $bias_c3_addr		;load bias_fixed(i)	bias��ַΪ i+bias_c1_addr

	v_add_b  VR8, VR8, SR5		;outputs_conv(:, :, i) =sum(tmp_map, 3) + bias_fixed(i);
	;print_b VR3, ln=0, ridx=0, cidx=0, len=8, row=8, intfxdp=4, acttask=0b0001, output=checkcheck.txt,output_mat=D:/output_mat/vbias.mat

	v_relu_b  VR8, VR8, SR0		;RELU����

	;print_b VR3, ln=0, ridx=0, cidx=0, len=8, row=8, intfxdp=4, acttask=0b0001, output=checkcheck.txt,output_mat=D:/output_mat/vrelu.mat

	s_wauxi [AUX_VLEN0], 9		;16��
	s_wauxi [AUX_MVVDCIDX], 0	;��0�п�ʼ
	v_movi_b VS1,1				;onematrix	 ͨ��movָ�ȫ1����load��VS1

	s_wauxi [AUX_DWUP], 0		;entire lane holding one matrix	indicate if the 2D convolution instruction is operated on half-lane mode
	s_wauxi [AUX_VLEN0], 9		;2D pooling��Ҫ���õ�	9*9=81��Ԫ��	The number of elements in vector operands.
	s_wauxi [AUX_ACTPE], 0b00000000_00000000_00000000_01010101	;������������	ʹ��4��PE	Indicate which PE (of each active Lane) will be activated.
	s_wauxi [AUX_VLEN1], 3		;width is 3	indicate the sliding window length of 1D/2D sliding
	s_wauxi [AUX_VLEN2], 3		;height is 3	indicate the sliding window height of 2D sliding
	s_wauxi [AUX_SLDSTRD1], 2	;indicate the  horizontal stride of elements number for 2D sliding.
	s_wauxi [AUX_SLDSTRD2], 2	;indicate the vertical stride of elements number for 2D sliding
	v_cnv2d_b  VR5, VR8, VS1	;2D���	���д��VR5

	s_wauxi [AUX_VLEN0], 4		;��������Ϊ4
	s_wauxi [AUX_ACTPE], 0b00000000_00000000_00000000_00001111
	;v_divi_b  VR5, VR5, 9		;���ֵ	���д��VR5
	v_dotmuli_b  VR5, VR5, 0.125, intfxdp=4 ;û�г������������ó˷�����

	;print_b VR5, ln=0, ridx=0, cidx=0, len=4, row=4, intfxdp=4, acttask=0b1111, output=checkcheck.txt,output_mat=D:/output_mat/meanpooling.mat

	s_wauxi [AUX_LSVRIDX], 0	;����store��DDR	��ʼ�к� 0	indicate the row index for starting element in Lane SRAM array
	s_wauxi [AUX_LSVCIDX], 0	;��ʼ�к� 0	indicate the column index for starting element in Lane SRAM array
	s_wauxi [AUX_LSVROW], 4		;4��	indicates the number of rows to be transferred from/to memory in vertical transferred mode
	s_wauxi [AUX_LSVLEN], 4 	;һ��store 4��Ԫ��	indicate the number of elements to be loaded or stored in vector load/store instructions
	;=========4��ͼһ���=============
	s_mulwi  SR5, SR1, 64		;����offset =4 *4 *4 fig =16*4 = 64 4��ͼһ���
	v_st_b  VR5, SR5, $outputs_pool_c3_addr

	s_addi  SR1, SR1, 1
	;s_bne  SR1, 64, loop0
	;export_mem ./lenet_fixed8/conv3_mem_data_out.txt
	;print_b mem, base=$outputs_pool_c3_addr, bias=0, len=16, row=4, intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling1.mat	;row1
	;print_b mem, base=$outputs_pool_c3_addr, bias=16, len=4, row=4,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling2.mat	;row2
	;print_b mem, base=$outputs_pool_c3_addr, bias=32, len=4, row=4, intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling3.mat;row3
	;print_b mem, base=$outputs_pool_c3_addr, bias=48, len=4, row=4,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling4.mat	;row4
	;print_b mem, base=$outputs_pool_c3_addr, bias=64, len=4, row=4, intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling5.mat;row5
	;print_b mem, base=$outputs_pool_c3_addr, bias=160, len=4, row=4, intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling11.mat;row11
	;print_b mem, base=$outputs_pool_c3_addr, bias=320, len=4, row=4, intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling21.mat;row21
	;print_b mem, base=$outputs_pool_c3_addr, bias=480, len=4, row=4,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling31.mat;row31
	;print_b mem, base=$outputs_pool_c3_addr, bias=496, len=4, row=4,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling32.mat;row32
	;print_b mem, base=$outputs_pool_c3_addr, bias=800, len=4, row=4,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling51.mat;row51
	;print_b mem, base=$outputs_pool_c3_addr, bias=1008, len=4, row=4,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/pooling64.mat;row64



