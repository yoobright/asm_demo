__DATA
    input_c1_0_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    input_c1_1_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    input_c1_2_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    input_c1_3_addr      Byte, 3072        ;32*32*3=3072    input_conv  of conv1
    kernel_c1_addr       Byte, 2400        ;5*5*3*32 = 2400    kernels  of conv1
    bias_c1_addr         Byte, 32        ;1*32 = 32    bias_fixed  of conv1
    kernel_c2_addr       Byte, 25600    ;5*5*32*32 = 25600    kernels  of conv2
    bias_c2_addr         Byte, 32        ;1*32 = 32    bias_fixed  of conv2
    kernel_c3_addr       Byte, 51200    ;5*5*32*64 = 51200    kernels  of conv3
    bias_c3_addr         Byte, 64        ;1*64= 64    bias_fixed  of conv3
    kernel_fc4_addr      Byte, 65536    ;4*4*64*64 elements    kernels  of fc4
    bias_fc4_addr        Byte, 64        ;1*64 = 64 elements    bias_fixed  of fc4
    kernel_fc5_addr      Byte, 640        ;1*1*64*10 elements    kernels  of fc5
    bias_fc5_addr        Byte, 10        ;1*10 = 10 elements    bias_fixed  of fc5
    output_fc4_addr      Byte, 256        ;1*64*4 = 256 elements    outputs_fc of fc4 �ķ�ͼ��һ����
    output_fc5_addr      Byte, 40        ;1*10*4= 40 elements    outputs_fc of fc5 �ķ�ͼ��һ����
    outputs_pool_c1_addr Byte, 32768    ;16*16*32*4 = 32768 elements    output of conv1, input of conv2 �ķ�ͼ��һ����    conv1���������ӦΪconv2������
    outputs_pool_c2_addr Byte, 8192        ;8*8*32*4 = 8192 elements    output of conv2, input of conv3 �ķ�ͼ��һ����
    outputs_pool_c3_addr Byte, 4096        ;4*4*64*4 = 4096 elements    output of conv3, input of fc-4    �ķ�ͼ��һ����


__CODE
	;import_mem ./lenet_fixed8/fc4_mem_data_out.txt
	s_wauxi [AUX_ACTLN], 0		;;Vector�������ø����Ĵ���		Indicate which Lane will be activated.
	s_wauxi [AUX_INTRND], 0		;���㻰����	round mode	Indicate the rounding mode if the element is fixed-point.
	s_wauxi [AUX_INTFXDP], 4	;truncate 4	Indicate the truncate position for the least significant bits of fixed-point result
	s_wauxi [AUX_INTSAT], 0		;saturate mode	Indicate saturation mode.

	;===========4��ͼ����һ��load======
	;s_wauxi [AUX_ACTTASK],0b1111	;����Ŀ�����ݵ���������Լ����������Ϊ4��byte	indicates The stride between each element in VR/VS

	s_wauxi [AUX_LSVLN], 0		;Load input��VS1	Lane��Ϊ0	indicate the Lane index to be loaded or stored in vector load/store instructions
	s_wauxi [AUX_LSVSTRD], 0	;address stride 0	indicate the address stride (of elements number) between each element in memory for vector load/store instructions.
	s_wauxi [AUX_LSVCIDX], 0	;start column 0	indicate the column index for starting element in Lane SRAM array
	s_wauxi [AUX_LSVLEN], 64	;һ��load 64	indicate the number of elements to be loaded or stored in vector load/store instructions.
	v_ld_b VS1, SR0, $output_fc4_addr

	s_wauxi [AUX_LSVHV], 0		;Load kernel��VR1	horizontally	indicate the data will be transferred horizontally or vertically from/into Lane SRAM array
	s_wauxi [AUX_LSVRIDX], 0		;start row 0	indicate the row index for starting element in Lane SRAM array.
	s_wauxi [AUX_LSVROW], 10		;10 rows	indicates the number of rows to be transferred from memory in horizontal transferred mod
	s_wauxi [AUX_LSVROWSTRD], 0	;row stride 0	 indicates The stride between each row or each column in memory space

	;===========kernelֻ��һ�ݣ���Ҫ�ظ���ȡ=========
	;s_wauxi [AUX_ACTTASK],0b0001
	v_ld_b VR1, SR0, $kernel_fc5_addr
	;s_wauxi [AUX_ACTTASK],0b0010
	v_ld_b VR1, SR0, $kernel_fc5_addr
	;s_wauxi [AUX_ACTTASK],0b0100
	v_ld_b VR1, SR0, $kernel_fc5_addr
	;s_wauxi [AUX_ACTTASK],0b1000
	v_ld_b VR1, SR0, $kernel_fc5_addr
	;print_f vR1, aux_lsvln=0, aux_lsvridx=0, aux_lsvcidx=0, aux_lsvlen=64, aux_lsvrow =10, output=checkcheck.txt

	;s_wauxi [AUX_ACTTASK],0b1111
	s_wauxi [AUX_VLEN0], 1		;1��
	s_wauxi [AUX_MVVROW], 10	;32��
	s_wauxi [AUX_MVVDRIDX], 0	;��0�п�ʼ
	v_movi_b PR, 0			;VR1��VS1����ۼ�		PRԤ��Ϊ0�����ڽ������ĵ���ۼ�ʹ��

	s_wauxi [AUX_ACTPE], 0b00000000_00000000_00000011_11111111		;ʹ��ǰ10��PE	indicate the corresponding PE (of each active Lane) will be activated or not in the following instructions
	s_wauxi [AUX_VLEN0], 64		;��������Ϊ64	indicate number of elements for 1st vector operand to be executed in vector instructions

	v_mulacc_b PR, VR1, VS1	;		�ĵ���ָ���޲�����		��������ۼӣ��ۼ�PR����д�뵽PR
	;print_b pr, ln=0, len=10, intfxdp=4, acttask=0b1111, output=checkcheck.txt,output_mat=D:/output_mat/pr.mat

	s_wauxi [AUX_LSVLEN], 10		;Load bias��VR2	һ�� load 10	indicate the number of elements to be loaded or stored in vector load/store instructions.
	s_wauxi [AUX_LSVROW], 1		;1 rows	indicates the number of rows to be transferred from memory in horizontal transferred mod
	s_wauxi [AUX_LSVROWSTRD], 0	;row stride 0	 indicates The stride between each row or each column in memory space
	;=========biasֻ��һ�ݣ�Ҳ��Ҫ�ظ���ȡ========
	;s_wauxi [AUX_ACTTASK],0b0001
	v_ld_b VR2, SR0, $bias_fc5_addr
	;s_wauxi [AUX_ACTTASK],0b0010
	v_ld_b VR2, SR0, $bias_fc5_addr
	;s_wauxi [AUX_ACTTASK],0b0100
	v_ld_b VR2, SR0, $bias_fc5_addr
	;s_wauxi [AUX_ACTTASK],0b1000
	v_ld_b VR2, SR0, $bias_fc5_addr

	s_wauxi [AUX_ACTLN], 0		;ǰ��ĵ���ۼӽ����bias���	Lane��Ϊ0	indicate the corresponding Lane will be activated or not in the following instructions
	s_wauxi [AUX_ACTPE], 0b00000000_00000000_00000000_00000001		;ʹ�õ�1��PE	indicate the corresponding PE (of each active Lane) will be activated or not in the following instructions
	s_wauxi [AUX_VLEN0], 10		;��������Ϊ10	indicate number of elements for 1st vector operand to be executed in vector instructions

	;s_wauxi [AUX_ACTTASK],0b1111
	s_wauxi [AUX_MVVROW], 10		;��PR����VR3		The number of rows in source or destination operands.
	s_wauxi [AUX_VLEN0],1		;ÿ��10��Ԫ��	The number of elements in source or destination operands
	s_wauxi [AUX_MVVSRIDX], 0	;Դ����λ��0�п�ʼ	The row index for starting element of source operand in Lane SRAM array
	s_wauxi [AUX_MVVSCIDX], 0	;Դ����λ��0�п�ʼ	The column index for starting element of source operand in Lane SRAM array
	s_wauxi [AUX_MVVDRIDX], 0	;Ŀ������λ��0�п�ʼ	The row index for starting element of the destination operand in Lane SRAM arra
	s_wauxi [AUX_MVVDCIDX], 0 	;Ŀ������λ��0�п�ʼ	The column index for starting element of the destination operand in Lane SRAM array
	;v_movt_b VR3, PR	        ;��1��move��1����

	s_wauxi [AUX_VLEN0], 10		;��������Ϊ10	indicate number of elements for 1st vector operand to be executed in vector instructions
	v_add_b VR2, VR2, VR3		;�ĵ���ԭ������û��PR

	;==============4��ͼһ���=================
	s_wauxi [AUX_LSVLEN], 40		;һ��store 10*4fig=40	indicate the number of elements to be loaded or stored in vector load/store instructions.
	v_st_b VR2, SR0, $output_fc5_addr 	;store outputs��DDR
	;print_b VR2, ln=0, ridx=0, cidx=0, len=10, row=1, intfxdp=4, acttask=0b1111, output=checkcheck.txt,output_mat=D:/output_mat/fc5sim.mat

	;export_mem ./lenet_fixed8/fc5_mem_data_out.txt
	;print_b mem, base=$output_fc5_addr, bias=0, len=10, row=1,intfxdp=4, output=checkcheck.txt,output_mat=D:/output_mat/fc5.mat;
